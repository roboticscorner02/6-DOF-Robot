// Generated by gencpp from file robot1_controller/AnglesConverterRequest.msg
// DO NOT EDIT!


#ifndef ROBOT1_CONTROLLER_MESSAGE_ANGLESCONVERTERREQUEST_H
#define ROBOT1_CONTROLLER_MESSAGE_ANGLESCONVERTERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot1_controller
{
template <class ContainerAllocator>
struct AnglesConverterRequest_
{
  typedef AnglesConverterRequest_<ContainerAllocator> Type;

  AnglesConverterRequest_()
    : base(0.0)
    , holder1(0.0)
    , bracket1(0.0)
    , holder2(0.0)
    , bracket2(0.0)
    , gripper(0.0)  {
    }
  AnglesConverterRequest_(const ContainerAllocator& _alloc)
    : base(0.0)
    , holder1(0.0)
    , bracket1(0.0)
    , holder2(0.0)
    , bracket2(0.0)
    , gripper(0.0)  {
  (void)_alloc;
    }



   typedef double _base_type;
  _base_type base;

   typedef double _holder1_type;
  _holder1_type holder1;

   typedef double _bracket1_type;
  _bracket1_type bracket1;

   typedef double _holder2_type;
  _holder2_type holder2;

   typedef double _bracket2_type;
  _bracket2_type bracket2;

   typedef double _gripper_type;
  _gripper_type gripper;





  typedef boost::shared_ptr< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AnglesConverterRequest_

typedef ::robot1_controller::AnglesConverterRequest_<std::allocator<void> > AnglesConverterRequest;

typedef boost::shared_ptr< ::robot1_controller::AnglesConverterRequest > AnglesConverterRequestPtr;
typedef boost::shared_ptr< ::robot1_controller::AnglesConverterRequest const> AnglesConverterRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot1_controller::AnglesConverterRequest_<ContainerAllocator1> & lhs, const ::robot1_controller::AnglesConverterRequest_<ContainerAllocator2> & rhs)
{
  return lhs.base == rhs.base &&
    lhs.holder1 == rhs.holder1 &&
    lhs.bracket1 == rhs.bracket1 &&
    lhs.holder2 == rhs.holder2 &&
    lhs.bracket2 == rhs.bracket2 &&
    lhs.gripper == rhs.gripper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot1_controller::AnglesConverterRequest_<ContainerAllocator1> & lhs, const ::robot1_controller::AnglesConverterRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot1_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "100c1ba176134904b4afc3cab2bea2ab";
  }

  static const char* value(const ::robot1_controller::AnglesConverterRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x100c1ba176134904ULL;
  static const uint64_t static_value2 = 0xb4afc3cab2bea2abULL;
};

template<class ContainerAllocator>
struct DataType< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot1_controller/AnglesConverterRequest";
  }

  static const char* value(const ::robot1_controller::AnglesConverterRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request\n"
"float64 base\n"
"float64 holder1\n"
"float64 bracket1\n"
"float64 holder2\n"
"float64 bracket2\n"
"float64 gripper\n"
;
  }

  static const char* value(const ::robot1_controller::AnglesConverterRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.base);
      stream.next(m.holder1);
      stream.next(m.bracket1);
      stream.next(m.holder2);
      stream.next(m.bracket2);
      stream.next(m.gripper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AnglesConverterRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot1_controller::AnglesConverterRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot1_controller::AnglesConverterRequest_<ContainerAllocator>& v)
  {
    s << indent << "base: ";
    Printer<double>::stream(s, indent + "  ", v.base);
    s << indent << "holder1: ";
    Printer<double>::stream(s, indent + "  ", v.holder1);
    s << indent << "bracket1: ";
    Printer<double>::stream(s, indent + "  ", v.bracket1);
    s << indent << "holder2: ";
    Printer<double>::stream(s, indent + "  ", v.holder2);
    s << indent << "bracket2: ";
    Printer<double>::stream(s, indent + "  ", v.bracket2);
    s << indent << "gripper: ";
    Printer<double>::stream(s, indent + "  ", v.gripper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT1_CONTROLLER_MESSAGE_ANGLESCONVERTERREQUEST_H
