// Generated by gencpp from file robot1_remote/Robot1TaskGoal.msg
// DO NOT EDIT!


#ifndef ROBOT1_REMOTE_MESSAGE_ROBOT1TASKGOAL_H
#define ROBOT1_REMOTE_MESSAGE_ROBOT1TASKGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot1_remote
{
template <class ContainerAllocator>
struct Robot1TaskGoal_
{
  typedef Robot1TaskGoal_<ContainerAllocator> Type;

  Robot1TaskGoal_()
    : task_number(0)  {
    }
  Robot1TaskGoal_(const ContainerAllocator& _alloc)
    : task_number(0)  {
  (void)_alloc;
    }



   typedef int64_t _task_number_type;
  _task_number_type task_number;





  typedef boost::shared_ptr< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> const> ConstPtr;

}; // struct Robot1TaskGoal_

typedef ::robot1_remote::Robot1TaskGoal_<std::allocator<void> > Robot1TaskGoal;

typedef boost::shared_ptr< ::robot1_remote::Robot1TaskGoal > Robot1TaskGoalPtr;
typedef boost::shared_ptr< ::robot1_remote::Robot1TaskGoal const> Robot1TaskGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot1_remote::Robot1TaskGoal_<ContainerAllocator1> & lhs, const ::robot1_remote::Robot1TaskGoal_<ContainerAllocator2> & rhs)
{
  return lhs.task_number == rhs.task_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot1_remote::Robot1TaskGoal_<ContainerAllocator1> & lhs, const ::robot1_remote::Robot1TaskGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot1_remote

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a44f0e3523e87134465bfb1a1ffe53cc";
  }

  static const char* value(const ::robot1_remote::Robot1TaskGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa44f0e3523e87134ULL;
  static const uint64_t static_value2 = 0x465bfb1a1ffe53ccULL;
};

template<class ContainerAllocator>
struct DataType< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot1_remote/Robot1TaskGoal";
  }

  static const char* value(const ::robot1_remote::Robot1TaskGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"int64 task_number\n"
;
  }

  static const char* value(const ::robot1_remote::Robot1TaskGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Robot1TaskGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot1_remote::Robot1TaskGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot1_remote::Robot1TaskGoal_<ContainerAllocator>& v)
  {
    s << indent << "task_number: ";
    Printer<int64_t>::stream(s, indent + "  ", v.task_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT1_REMOTE_MESSAGE_ROBOT1TASKGOAL_H
