# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot1_controller/AnglesConverterRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AnglesConverterRequest(genpy.Message):
  _md5sum = "100c1ba176134904b4afc3cab2bea2ab"
  _type = "robot1_controller/AnglesConverterRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Request
float64 base
float64 holder1
float64 bracket1
float64 holder2
float64 bracket2
float64 gripper
"""
  __slots__ = ['base','holder1','bracket1','holder2','bracket2','gripper']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       base,holder1,bracket1,holder2,bracket2,gripper

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AnglesConverterRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.base is None:
        self.base = 0.
      if self.holder1 is None:
        self.holder1 = 0.
      if self.bracket1 is None:
        self.bracket1 = 0.
      if self.holder2 is None:
        self.holder2 = 0.
      if self.bracket2 is None:
        self.bracket2 = 0.
      if self.gripper is None:
        self.gripper = 0.
    else:
      self.base = 0.
      self.holder1 = 0.
      self.bracket1 = 0.
      self.holder2 = 0.
      self.bracket2 = 0.
      self.gripper = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.base, _x.holder1, _x.bracket1, _x.holder2, _x.bracket2, _x.gripper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.base, _x.holder1, _x.bracket1, _x.holder2, _x.bracket2, _x.gripper,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.base, _x.holder1, _x.bracket1, _x.holder2, _x.bracket2, _x.gripper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.base, _x.holder1, _x.bracket1, _x.holder2, _x.bracket2, _x.gripper,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot1_controller/AnglesConverterResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AnglesConverterResponse(genpy.Message):
  _md5sum = "100c1ba176134904b4afc3cab2bea2ab"
  _type = "robot1_controller/AnglesConverterResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Response
float64 base
float64 holder1
float64 bracket1
float64 holder2
float64 bracket2
float64 gripper
"""
  __slots__ = ['base','holder1','bracket1','holder2','bracket2','gripper']
  _slot_types = ['float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       base,holder1,bracket1,holder2,bracket2,gripper

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AnglesConverterResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.base is None:
        self.base = 0.
      if self.holder1 is None:
        self.holder1 = 0.
      if self.bracket1 is None:
        self.bracket1 = 0.
      if self.holder2 is None:
        self.holder2 = 0.
      if self.bracket2 is None:
        self.bracket2 = 0.
      if self.gripper is None:
        self.gripper = 0.
    else:
      self.base = 0.
      self.holder1 = 0.
      self.bracket1 = 0.
      self.holder2 = 0.
      self.bracket2 = 0.
      self.gripper = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.base, _x.holder1, _x.bracket1, _x.holder2, _x.bracket2, _x.gripper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.base, _x.holder1, _x.bracket1, _x.holder2, _x.bracket2, _x.gripper,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.base, _x.holder1, _x.bracket1, _x.holder2, _x.bracket2, _x.gripper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.base, _x.holder1, _x.bracket1, _x.holder2, _x.bracket2, _x.gripper,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
class AnglesConverter(object):
  _type          = 'robot1_controller/AnglesConverter'
  _md5sum = '520baf98315cffffbe617b7c68675a94'
  _request_class  = AnglesConverterRequest
  _response_class = AnglesConverterResponse
